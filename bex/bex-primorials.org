#+title: BDDs and my #megafavnumber

* =00:30= 00 Intro:#megafavnumbers
Hi there. My name is michal, and this video
is about boolean expressions and my two #megafavnumbers.

#megafavnumbers is a youtube playlist where a bunch
of really great math-related channels are sharing
their favorite numbers greater than 1 million, and
they've opened it up to viewers to submit their own.

I wasn't really sure I had a favorite number, but
then I realized there is a huge number I think about
quite a bit:

: K =   614,889,782,588,491,410

The second is an example of something called a primorial.
It's the product of the first 15 prime numbers. It's also
the biggest primorial that you can store in a 64-bit
register.

I don't know if there are any interesting theorems related
to these numbers, but they both play a big role in one of
my main programming projects, which is a rust crate
(or library) that I call bex.

So, that's what I'm going to talk about.

* =01:00= 07 Primorials
** a. tests and benchmarks
Okay, so far, we've only been looking at these tiny functions of three variables.

But but BDDs can work with hundreds or thousands of variables, and even with
just a few more inputs, complicated functions can result in huge BDDs, and
those are the cases I want to work with.

As I said, bex has become something of an exercise in optimization for me.

In order to make sure I'm not breaking anything, I need a suite of test
problems that bex can run quickly, so I can run the tests after every change.

And in order to tell whether a change actually speeds things up, I need a
benchmark - something that takes a long time to solve, so I can see whether
the time improves.

** b. standard test problem

So that's where this number comes in.

: */ p: i. 15

(This is a language called J. It's a full programming language,
but it's also kind of an executable math notation, and probably
one of the best desktop calculators you can get.)

It executes right to left, so:

: 15                NB. the number fifteen
: i. 15             NB. the first fifteen non-negative integers
: p: i. 15          NB. the first fifteen primes
: */ p: i. 15       NB. their product (literally insert a multiplication sign between them)

A product of the first n primes is apparently called a primorial,
which I suppose is a combination of the words prime and factorial.

This primorial happens to be the largest one whose binary
representation can fit in a 64-bit register.

:   (2^64) > */ p: i. 15
: 1
:   (2^64) > */ p: i. 16
: 0

** the problem to solve

The benchmarking problem I set for bex is to figure out all
the ways you can multiply two thirty-two bit numbers together
to get this number.

Or in other words, factor the number. I could have asked it to
factor any big number, but with primorials in particular it's
really easy for me as the test author to generate the correct
answer.

** factors
The trick is to take the fifteen primes and find every possible
way to divide them into two groups.

Well, that part's easy. You just count to 2^15 in binary.

Here's a smaller example that fits on the screen:

:   */ p: i. 15
:   */ p: i. n=: 15     NB. let's give the 15 a name
:   */ p: i. n=: 4      NB. and drop it to 4
:   i. n=: 3            NB. first three ints
:   i. 2^n =: 3         NB. count to 2^3
:   #: i. 2^n =: 3      NB. same thing in binary

Now we can use these patterns to group the primes.

:   (#: i. 2^n) </."1 p:i.n =: 3     NB. use t

You can see it duplicates the list.
That's because half of the binary representations are just
the other half flipped.

: viewmat #: i. 2^n

So we can just use half of them

:  #: i. 2^n-1

and put a 0 on the left so each line still matches the numbers of primes

:  0 ,. #: i. 2^n-1

Now we have every unique grouping of factors:

:   (0 ,. #: i. 2^n-1) </."1 p:i.n =: 3


And we can do the same thing for our original 15.

But the question was which 32-bit factors, and some of these numbers are too big.

So multiply the contents of each box:

: */L:0

then we can ditch the boxes completely:

: >

just as a sanity check, that gives us:

: #

16384

if we factor that, we get

: q: 16384
: # q: 16384

2 to the 14th power. which is exactly what we asked it for.

So that's all pairs of integers that multiply to our primorial.

But we want to select the ones where both numbers are less than 2^32

: ({~ [: I. [: *./"1 <&(2^32))

This is too much J to explain in detail right now, but it
literally says select using the indices where all the items
on a row are less than this number.

That gives us exactly...

:    # ({~ [: I. [: */"1 <&(2^32)) > */L:0 (0 ,. #: i. 2^n-1) </."1 p:i.n =: 15
: 3827

... 3827 unique pairs of 32-bit numbers that factor into our number.

** the rust code
# show bdd-solve

And after a little formatting, those numbers and the primorial itself
go into this rust file, and there's our test case.

#+begin_src rust
find_factors!(BDD, X32, X64, K as usize, factors(), false); }
#+end_src

It's a macro that says use a BDD to find all pairs of 32-bit
factors of the 64-bit number K, (arranged so that the first
number is less than the second), and then check that the
answers match this list.

(The last parameter says whether or not to show some extra
debug information. It really ought to be a command line
parameter, but whatever.)

So let's see what happens when we run this.

: cargo run --bin bdd-solve

Off to a good start.

This would be a good time for my scroll lock key to actually work,
but since it doesn't I can just scroll up a little to freeze the
display.

And there's a bunch of stuff about ands and xors, but it also says
step xxx of 7997 so we're already at xxx percent.

Unfortunately, that number is fairly misleading. The way the
current solver works, it knows how many steps it will take to
construct the solution, but it doesn't know how long each step
is going to take.

You can see already it's slowing down.

** So what is it trying to do? (chess story)

If it works, then the output will be a BDD on 64 input bits,
and 1 output bit, and it'll represent the function that returns
true when the first 32 bits multiplied by the second 32 bits
is this number K.

Since it has 64 input bits, that means the truth table is
2^64 bits wide, which is an INSANELY large number.

This is that story about the grains of rice on the chessboard.
As payment for inventing the game of chess, you ask the emperor
for a grain of rice on the first square, two in the second square,
double each time, and after a while, the emperor's accountants
figure out what's going on and chop your head off.

So yeah, the truth table is 2^64 entries wide. Each entry
represents a pair of 32-bit numbers that might or might
not multiply, but we happen to know that there are only
3,827 such numbers.

A BDD ought to be able to represent this truth table fairly
efficiently. The problem is just constructing it from the
problem statement.

** give up

# I actually stopped this around 5% because my computer locked up.
# It was right after I got up to go to the bathroom so I suspect
# the thread just got moved to the foreground and didn't want to
# give back control. Either way, I should probably manually stop
# the program.

I wanted a problem with an easy answer to generate and check
but that would be hard for bex.

I knew multiplication is particularly hard for bdds - meaning you
wind up with a very large bdd.

But I didn't know HOW hard it would be.

Turns out it's really really hard.
The percentage numbers are somewhat misleading.
It's going to get slower and slower as it goes along.

I've never actually seen this program finish,
and it's not garbage collecting, so I think last time
i tried, it just churned for a few days, and then finally
crashed when it ran out of RAM.

So yeah, it turned out my initial problem is way too
hard for bex to solve right now, and so the reason
that number is always on my mind is simply that it
represents a pretty ambitious goal to shoot for.

** show it working

* =00:30= closing
i was hoping to actually implement those ideas for this video,
but i'm out of time, and i've probably talked long enough already.

but if people find it interesting, maybe i'll make a
follow-up video someday.

meanwhile, there's a link to the bex source code on github
in the video description, as well as other related links.

check out the other videos in my channel for more about J,
and check out the #magafavnumbers playlist to see more videos
about interesting giant numbers, or to upload your own.

Anyway, thanks for watching, and I'll see you next time!


